// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  role          String      @default("")
  accounts      Account[]
  sessions      Session[]
  Company       Company?    @relation(fields: [companyId], references: [id], name: "employees")
  companyId     String?
  HeadOfCompany Company?
  invitation    Invitation?
}

model Invitation {
  id     String           @id @default(cuid())
  status InvitationStatus @default(PENDING)
  user   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String           @unique
}

enum InvitationStatus {
  PENDING
  ACCEPTED
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Job {
  id                  String        @id @default(cuid())
  title               String
  description         String        @default("")
  country             String        @default("")
  city                String        @default("")
  postedAt            DateTime      @default(now())
  applicationDeadline DateTime?
  employmentType      String        @default("Full-time")
  salary              Int           @default(0)
  currency            String        @default("EUR")
  requirements        String        @default("")
  responsibilities    String        @default("")
  experienceLevel     String        @default("Senior")
  industry            String? // Industry of the job (e.g., IT, Healthcare, Finance) (optional)
  jobType             String        @default("Hybrid")
  skillsRequired      String[]      @default([])
  benefits            String?
  quota               Int           @default(1)
  // Relationships
  company             Company       @relation(fields: [companyId], references: [id])
  companyId           String
  stages              Stage[]
  candidates          Candidate[]
  active              Boolean       @default(false)
  form                CustomField[]
  filters             Filter[]
}

model Stage {
  id         String      @id @default(cuid())
  title      String
  color      String
  order      Int
  // Relationships
  job        Job         @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId      String
  candidates Candidate[]
  actions    Action[]
}

model Company {
  id            String          @id @default(cuid())
  name          String
  website       String
  head          User?           @relation(fields: [headId], references: [id], onDelete: SetNull)
  headId        String?         @unique
  emailHost     String          @default("")
  emailPort     Int             @default(0)
  emailUser     String          @default("")
  emailPass     String          @default("")
  // Additional fields for company-related information
  // Example: industry, headquarters location, company size, etc.
  // Relationships
  jobs          Job[] // A company can have multiple job listings
  user          User[]          @relation(name: "employees")
  EmailTemplate EmailTemplate[]
}

model TitleField {
  value         String      @default("")
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  customFieldId String      @id
}

model ParagraphField {
  value         String
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  customFieldId String      @id
}

model RadioField {
  label         String
  orientation   Orientation
  value         String[]
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  customFieldId String      @id
}

model DropdownField {
  label         String
  value         String[]
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  customFieldId String      @id
}

model FormField {
  label         String
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  customFieldId String      @id
}

model FileField {
  label         String
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  customFieldId String      @id
}

model GridField {
  value         CustomField[] @relation(name: "parentGridField")
  customField   CustomField   @relation(name: "gridField", fields: [customFieldId], references: [id], onDelete: Cascade)
  customFieldId String        @id
}

model CustomField {
  id                String          @id @default(cuid())
  valueType         ValueType
  formField         FormField?
  titleField        TitleField?
  paragraphField    ParagraphField?
  radioField        RadioField?
  dropdownField     DropdownField?
  fileField         FileField?
  gridField         GridField?      @relation(name: "gridField")
  parentGridField   GridField?      @relation(name: "parentGridField", fields: [parentGridFieldId], references: [customFieldId])
  parentGridFieldId String?
  job               Job             @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId             String
}

enum ValueType {
  TITLE
  PARAGRAPH
  RADIO
  DROPDOWN
  GRID
  FORM
  FILE
}

enum Orientation {
  HORIZONTAL
  VERTICAL
}

model Candidate {
  id              String           @id @default(cuid())
  firstName       String
  lastName        String
  email           String
  phone           String
  resumeLink      String           @default("")
  date            DateTime
  customFields    Json
  // OpenAI fields
  location        String?
  portfolio       String?
  linkedin        String?
  github          String?
  university      String?
  educationLevel  EducationLevel?
  graduationDate  DateTime?
  majors          String[]
  workExperience  WorkExperience[]
  skills          String[]
  languages       String[]
  experienceYears Float?
  projects        Project[]
  parsed          Boolean          @default(false)
  passedFilter    Boolean          @default(true)
  // Relationships
  stage           Stage            @relation(fields: [stageId], references: [id])
  stageId         String
  Job             Job              @relation(fields: [jobId], references: [id])
  jobId           String
}

model WorkExperience {
  id          Int       @id @default(autoincrement()) //TODO: Edit
  jobTitle    String
  company     String
  location    String
  startDate   DateTime
  endDate     DateTime
  duration    Float
  jobSummary  String
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model Project {
  id          Int       @id @default(autoincrement()) //TODO: Edit
  name        String    @default("")
  description String    @default("")
  url         String    @default("")
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model Action {
  id              String         @id @default(cuid())
  type            ActionType
  emailTemplate   EmailTemplate? @relation(fields: [emailTemplateId], references: [id])
  note            Note?          @relation(fields: [noteId], references: [id])
  stage           Stage          @relation(fields: [stageId], references: [id])
  stageId         String
  emailTemplateId String?
  noteId          String?        @unique
}

model Note {
  id      String  @id @default(cuid())
  content String
  action  Action?
}

model EmailTemplate {
  id        String   @id @default(cuid())
  name      String
  subject   String
  body      String
  actions   Action[]
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
}

model Filter {
  id       String   @id @default(cuid())
  field    String   @default("Education level")
  operator Operator @default(EQUAL)
  value    String   @default("")
  Job      Job?     @relation(fields: [jobId], references: [id])
  jobId    String?
}

enum Operator {
  EQUAL
  HIGHER
  LOWER
  NOTEQUAL
  INCLUDES
}

enum ActionType {
  EMAIL
  NOTE
}

enum EducationLevel {
  BS
  MS
  PhD
}
